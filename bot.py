import requests
from telegram import Update, Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from bs4 import BeautifulSoup
import sqlite3
import asyncio
import os
from datetime import datetime, timedelta
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class NSDMonitor:
    def __init__(self):
        self.setup_database()
        self.base_url = "https://nsddata.ru"
        
    def setup_database(self):
        """–°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π"""
        self.conn = sqlite3.connect('nsd_news.db', check_same_thread=False)
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS tracked_news (
                id INTEGER PRIMARY KEY,
                news_id TEXT UNIQUE,
                isin TEXT,
                title TEXT,
                event_type TEXT,
                payment_amount TEXT,
                news_url TEXT,
                published_date TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()
    
    def add_isin_tracking(self, isin_code, user_id):
        """–î–æ–±–∞–≤–ª—è–µ–º ISIN –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_isins (
                user_id INTEGER,
                isin TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, isin)
            )
        ''')
        cursor.execute(
            'INSERT OR IGNORE INTO user_isins (user_id, isin) VALUES (?, ?)',
            (user_id, isin_code.upper())
        )
        self.conn.commit()
        return cursor.rowcount > 0
    
    def get_user_isins(self, user_id):
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ISIN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cursor = self.conn.cursor()
        cursor.execute('SELECT isin FROM user_isins WHERE user_id = ?', (user_id,))
        return [row[0] for row in cursor.fetchall()]
    
    def is_news_tracked(self, news_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑–µ"""
        cursor = self.conn.cursor()
        cursor.execute('SELECT 1 FROM tracked_news WHERE news_id = ?', (news_id,))
        return cursor.fetchone() is not None
    
    def save_news(self, news_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑—É"""
        cursor = self.conn.cursor()
        cursor.execute('''
            INSERT OR IGNORE INTO tracked_news 
            (news_id, isin, title, event_type, payment_amount, news_url, published_date)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            news_data['news_id'],
            news_data['isin'],
            news_data['title'],
            news_data['event_type'],
            news_data['payment_amount'],
            news_data['news_url'],
            news_data['published_date']
        ))
        self.conn.commit()
        return cursor.rowcount > 0
    
    def parse_news_page(self, html_content):
        """–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–≤–æ—Å—Ç—å—é –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_element = soup.find('h1')
        title = title_element.get_text().strip() if title_element else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ò—â–µ–º ISIN –≤ —Ç–µ–∫—Å—Ç–µ (—Ñ–æ—Ä–º–∞—Ç RU000A106SE5)
        isin_match = re.search(r'RU[0-9A-Z]{10}', title)
        isin = isin_match.group(0) if isin_match else None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        event_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if '–≤—ã–ø–ª–∞—Ç–∞ –∫—É–ø–æ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞' in title.lower():
            event_type = "–í—ã–ø–ª–∞—Ç–∞ –∫—É–ø–æ–Ω–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"
        elif '–ø–æ–≥–∞—à–µ–Ω–∏–µ' in title.lower():
            event_type = "–ü–æ–≥–∞—à–µ–Ω–∏–µ"
        elif '–æ—Ñ–µ—Ä—Ç–∞' in title.lower():
            event_type = "–û—Ñ–µ—Ä—Ç–∞"
        
        # –ò—â–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã–ø–ª–∞—Ç—ã
        payment_amount = None
        payment_match = re.search(r'(\d+[.,]\d+)\s*—Ä—É–±', html_content, re.IGNORECASE)
        if payment_match:
            payment_amount = payment_match.group(1) + " —Ä—É–±."
        
        # –ò—â–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        date_element = soup.find('time') or soup.find('div', class_=re.compile('date'))
        published_date = date_element.get_text().strip() if date_element else datetime.now().strftime("%d.%m.%Y")
        
        return {
            'title': title,
            'isin': isin,
            'event_type': event_type,
            'payment_amount': payment_amount,
            'published_date': published_date
        }
    
    def get_recent_news(self):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã nsddata.ru"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            response = requests.get(f"{self.base_url}/ru/news", headers=headers, timeout=10)
            response.encoding = 'utf-8'
            
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∞–π—Ç—É: {response.status_code}")
                return []
            
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞)
            news_links = []
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò—â–µ–º –ø–æ –∫–ª–∞—Å—Å–∞–º/—Ç–µ–≥–∞–º (–Ω—É–∂–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —Å–∞–π—Ç)
            news_elements = soup.find_all('a', href=re.compile(r'/ru/news/view/'))
            
            for element in news_elements[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
                href = element.get('href')
                if href and '/ru/news/view/' in href:
                    full_url = f"{self.base_url}{href}" if href.startswith('/') else href
                    news_id = href.split('/')[-1] if '/' in href else href
                    
                    # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
                    news_details = self.parse_news_page(response.text)  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ
                    
                    news_data = {
                        'news_id': news_id,
                        'news_url': full_url,
                        'title': element.get_text(strip=True) or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                        'isin': news_details.get('isin'),
                        'event_type': news_details.get('event_type'),
                        'payment_amount': news_details.get('payment_amount'),
                        'published_date': news_details.get('published_date')
                    }
                    
                    news_links.append(news_data)
            
            return news_links
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
            return []
    
    def check_new_news(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
        recent_news = self.get_recent_news()
        new_news = []
        
        for news in recent_news:
            if not self.is_news_tracked(news['news_id']):
                if self.save_news(news):
                    new_news.append(news)
                    logger.info(f"–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å: {news['title']}")
        
        return new_news

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
nsd_monitor = NSDMonitor()

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –æ–±–ª–∏–≥–∞—Ü–∏—è–º –Ω–∞ nsddata.ru\n\n"
        "üìã **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/add RU000A106SE5 - –¥–æ–±–∞–≤–∏—Ç—å ISIN –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ ISIN\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é\n"
        "/last - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n\n"
        "üîî –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–∏—Ç –æ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ –≤–∞—à–∏–º ISIN!"
    )

async def add_isin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ISIN –∫–æ–¥: /add RU000A106SE5")
        return
    
    isin_code = context.args[0].upper().strip()
    user_id = update.effective_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è ISIN
    if not re.match(r'^RU[0-9A-Z]{10}$', isin_code):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ISIN. –ü—Ä–∏–º–µ—Ä: RU000A106SE5")
        return
    
    if nsd_monitor.add_isin_tracking(isin_code, user_id):
        await update.message.reply_text(f"‚úÖ ISIN `{isin_code}` –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", parse_mode='Markdown')
    else:
        await update.message.reply_text(f"‚ö†Ô∏è ISIN `{isin_code}` —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è", parse_mode='Markdown')

async def list_isins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_isins = nsd_monitor.get_user_isins(user_id)
    
    if not user_isins:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö ISIN –∫–æ–¥–æ–≤")
        return
    
    message = "üìã **–í–∞—à–∏ ISIN –∫–æ–¥—ã:**\n\n" + "\n".join(f"‚Ä¢ `{isin}`" for isin in user_isins)
    await update.message.reply_text(message, parse_mode='Markdown')

async def manual_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_isins = nsd_monitor.get_user_isins(user_id)
    
    if not user_isins:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ ISIN –∫–æ–¥—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        return
    
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    new_news = nsd_monitor.check_new_news()
    relevant_news = [news for news in new_news if news.get('isin') in user_isins]
    
    if relevant_news:
        for news in relevant_news:
            message = format_news_message(news)
            await update.message.reply_text(message, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚úÖ –ù–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –≤–∞—à–∏–º ISIN –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

async def show_last_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    recent_news = nsd_monitor.get_recent_news()[:5]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
    
    if not recent_news:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
        return
    
    message = "üì∞ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:**\n\n"
    for news in recent_news:
        message += f"‚Ä¢ {news['title'][:50]}...\n"
        if news.get('isin'):
            message += f"  ISIN: `{news['isin']}`\n"
        message += "\n"
    
    await update.message.reply_text(message, parse_mode='Markdown')

def format_news_message(news):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –≤–∏–¥–µ"""
    message = "üëî **–ù–û–í–û–ï –°–û–ë–´–¢–ò–ï**\n\n"
    
    if news.get('isin'):
        message += f"`{news['isin']}`\n\n"
    
    if news.get('published_date'):
        message += f"üóì *{news['published_date']}*\n"
    
    if news.get('event_type'):
        message += f"üìã *{news['event_type']}*\n\n"
    
    message += f"*{news['title']}*\n"
    
    if news.get('payment_amount'):
        message += f"\nüí∞ *–†–∞–∑–º–µ—Ä –≤—ã–ø–ª–∞—Ç—ã:* {news['payment_amount']}"
    
    if news.get('news_url'):
        message += f"\n\nüîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({news['news_url']})"
    
    return message

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async def scheduled_news_check(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    try:
        new_news = nsd_monitor.check_new_news()
        
        if new_news:
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
            cursor = nsd_monitor.conn.cursor()
            cursor.execute('SELECT DISTINCT user_id FROM user_isins')
            users = cursor.fetchall()
            
            for (user_id,) in users:
                user_isins = nsd_monitor.get_user_isins(user_id)
                relevant_news = [news for news in new_news if news.get('isin') in user_isins]
                
                for news in relevant_news:
                    message = format_news_message(news)
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=message,
                            parse_mode='Markdown'
                        )
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                        await asyncio.sleep(1)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ scheduled_news_check: {e}")

def main():
    BOT_TOKEN = os.environ.get('BOT_TOKEN')
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_isin))
    application.add_handler(CommandHandler("list", list_isins))
    application.add_handler(CommandHandler("check", manual_check))
    application.add_handler(CommandHandler("last", show_last_news))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (–∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)
    job_queue = application.job_queue
    job_queue.run_repeating(scheduled_news_check, interval=600, first=10)  # 600 —Å–µ–∫ = 10 –º–∏–Ω
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()